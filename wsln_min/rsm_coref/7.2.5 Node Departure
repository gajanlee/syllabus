The idea for the normal node departure is quite simple. When a node leaves the structured P2P RSM, a node explicitly hands over a node's zone and the associated (key, value) list to one of a node's neighbors. The important thing is how to select one of its neighbors.  the structured P2P RSM has an implicit re-striction on its zone that its zone must be an n-dimensional rectangle. Thus, if the zone of one neighbor can be merged with a node's zone to produce a valid zone, then merged is done. one of its neighbors takes over the associated (key, value) list, and also gets the neighbor state of a node to produce one of its neighbors's own neighbor state. If such neighbors do not exist, for example, the node 11 in Fig. 7.6 cannot produce any valid single zone with its neighbors, any valid single zone is handed to the neighbor who has the smallest number of resource indices. However, the neighbor who has the smallest number of resource indices does not merge the two zones, but just temporarily handle the two zones, much like the neighbor who has the smallest number of resource indices acts as two virtual nodes. Afterwards, the two zones will be reoccupied by two joining nodes along with node join or merged with other zones into a valid single zone along with node departure. In both cases, the neighbors must be informed of this reallocation of space. The previously mentioned heart-beat style refreshment will be used here to ensure all node states are up-to-date. The idea for the normal node departure is quite simple. When a node leaves the structured P2P RSM, a node explicitly hands over a node's zone and the associated (key, value) list to one of a node's neighbors. The important thing is how to select one of its neighbors.  the structured P2P RSM has an implicit re-striction on its zone that its zone must be an n-dimensional rectangle. Thus, if the zone of one neighbor can be merged with a node's zone to produce a valid zone, then merged is done. one of its neighbors takes over the associated (key, value) list, and also gets the neighbor state of a node to produce one of its neighbors's own neighbor state. If such neighbors do not exist, for example, the node 11 in Fig. 7.6 cannot produce any valid single zone with its neighbors, any valid single zone is handed to the neighbor who has the smallest number of resource indices. However, the neighbor who has the smallest number of resource indices does not merge the two zones, but just temporarily handle the two zones, much like the neighbor who has the smallest number of resource indices acts as two virtual nodes. Afterwards, the two zones will be reoccupied by two joining nodes along with node join or merged with other zones into a valid single zone along with node departure. In both cases, the neighbors must be informed of this reallocation of space. The previously mentioned heart-beat style refreshment will be used here to ensure all node states are up-to-date. 
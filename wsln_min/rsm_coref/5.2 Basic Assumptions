For an n-dimensional resource space RS(X1, X2, …, Xn), we assume that the n axes are stored in the order (X1, X2, …, Xn), but the n axes are not sorted in alphabet. For every axis Xi=(Ci1, Ci2, …, Cij), the coordinates on the ax-is are also stored in the order (Ci1, Ci2, …, Cij) and are not sorted in alpha-bet. Here the comparison between coordinate and the query name is re-garded as the basic operation. 
Suppose N is the number of all of the points in the resource space RS(X1, X2, …, Xn), |Xi| is the number of coordinates on axis Xi, 1in, then  . We fix N and then study the relationship between the searching complexity and the dimension n as well as the relationship be-tween searching complexity and the distribution of coordinates on every axis.  Assume that points are as basic search units, axes are unsorted set, and the order of axes is unknown, then we have the following theorem. 
Theorem 5.1. Given a resource space RS(X1, X2, …, Xn), where every Xi and every Xi's coordinates are unsorted in alphabet, 1in. Suppose the number of coordinates on axis Xi is |Xi|, then any comparison-based algorithm to find the answer to Q(X1=q1, , Xn=qn) in RS(X1, X2, …, Xn) must do at least   times of comparison in the worst case. 
Proof. To get a point Q(X1=q1, , Xn=qn) in the space RS(X1, X2, …, Xn), search needs to check every qi on axis Xj, 1i n. Suppose Ti is the num-ber of comparisons needed to find qi, then, the times of comparison need-ed to find point Q(X1=q1, , Xn=qn) is  . To find q1, we need to determine the axis Xi q1 belongs to first, then search q1 on the axis Xi it belongs to. Since there are in all n axes which are not sorted in alphabet, so it takes at least n times of comparisons to find a specific axis Xi in the worst case. There are |Xj| coordinates not sorted in alphabet on the axis Xi it belongs to, so searching for q1 among |Xj| coordinates not sorted in alphabet needs at least |Xj| times of comparison in the worst case. So finding q1 needs at least n+|Xj| times of comparison in the worst case. We can use the same procedure to find q2, the only difference is we only need to search the remaining n1 axes. Then, finding q2 needs at least n1+|Xj| times of comparisons in the worst case. So in the worst case, finding point Q(X1=q1, , Xn=qn) needs at least   times of comparison.  
Theorem 5.1 shows that the searching complexity is related to the di-mension and the distribution of coordinates on axes. Then, what is the relationship between the searching complexity and the changing of the dimension? And what is the relationship between the searching complexity and the distribution of coordinates on every axis? The following two parts answer these questions. 
Corollary 5.1. To find the answer to Q(X1=q1, , Xk=qk) in RS(X1, X2, …, Xn) must do at least   times of comparison in the worst case (kn). 
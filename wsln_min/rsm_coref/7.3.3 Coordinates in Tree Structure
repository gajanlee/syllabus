The resource space described above is a standard n-dimensional topologi-cal space where each dimension has a flat coordinate space. However, a resource space may have coordinates in tree structure. Here discusses the implementation of these extensions for coordinates in tree structure. An example of the coordinates in tree structure is shown in Fig. 7.8. Such coordinates enable The resource space described above to represent rich semantics. 
When involving coordinates in tree structure, the design of the struc-tured P2P RSM may face two main problems. The first is how to com-pute the distance between coordinates in such a resource space. The sec-ond is how to locate a coordinate in tree structure. 
In order to use distance computing method in the flat coordinate view, we map the coordinates in tree structure into a flat one.  Each leaf in a tree corresponds to a path from the root. And we use a path from the root to name Each leaf in a tree. Then, we replace the coordinates in tree structure with the leaf path’s names. An example of the flattened coordinates for Fig. 7.8 is shown in Fig. 7.9. The path name is composed of names of passing nodes which are separated with a slash.  
From the figures, we can see that one coordinate a in the tree structure should be represented by five coordinates in flat structure.  Thus, to compute the distance between one coordinate a in the tree structure and any other coordinates becomes to compute the distance between the span (a/a1/a11 – a/a2/a23) and five coordinates.  Essentially the original algorithm is designed to settle the single key search problem, but the coordinate locating in the coordinate tree turns into a range search.  Thus, the original coordinate locating al-gorithm should be adjusted to reflect turns. 
As the coordinates in the resource space are discrete, one possible solu-tion is to decompose a into a/a1/a11, a/a1/a12, a/a2/a21, a/a2/a22, a/a2/a23, and set up searches for a/a1/a11, a/a1/a12, a/a2/a21, a/a2/a22, a/a2/a23, and finally com-pose the search result. But this solution may introduce a search request flood, and produce unnecessary network overhead. 
To eliminate the unnecessary search requests, we change the request for a to request for a's lower bound a/a1/a11, and on the node responsible for its lower bound a/a1/a11, we initiate a range search for (its lower bound a/a1/a11, a/a2/a23) which will return the correct results.  
The process for the range search is as follows. 
// suppose P is the node responsible for lower bound of tree structured  
// coordinates. This span search will be initiated on P. 
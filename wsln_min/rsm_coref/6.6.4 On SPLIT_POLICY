When a node in the tree index overflows, a node in the tree index needs split since the allocated storage space for a node in the tree index is limited.  The goodness standards for node split are much the same as that of insert policy. Blank space should be minimized to improve query efficiency. The difficulty of achieving minimized in C-tree is the same as that of insertion.  
Our approach consists of two steps. At the first step, pick up two chil-dren of current node as seeds. two chil-dren of current node should be the farthest pair of child nodes. Suppose mbr1=([s10, e10], [s11, e11],..., [s1 n-1, e1 n-1] ) and mbr2=([s20, e20], [s21, e21],..., [s2 n-1, e2 n-1] ). two chil-dren of current node's pre-order distance distPre(mbr1, mbr2) is defined to be i=0..n-1 f([s1i, e1i], [s2i, e2i]) where  
f([s1i, e1i], [s2i, e2i]) 
distPre(mbr1, mbr2) computes the distance in the pre-order traverse of RSM shema tree. It measures the farness of a pair of child nodes by the sum of the semantic distances of a pair of child nodes's projections on each dimension. It measures an overall semantic closeness from the perspective of multidi-mensional classification.  
The second step is assigning each left child nodes of current node to the nearer one of the two seeds. For example, mbr’ will be assigned to mbr1 if distPre(mbr1, mbr’) is smaller than distPre(mbr2, mbr’). This pro-cess will group together similar classification zones in the space. 
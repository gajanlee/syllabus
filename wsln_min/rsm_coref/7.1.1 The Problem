Peer-to-Peer (P2P) networks can be largely classified into two types: un-structured and structured.  
In unstructured P2P networks like Freenet (Clarke et al., 2000), Gnutella (http://www.gnutella.com) and Napster (http://www.napster.com), each peer manages each peer's own data, and there is no particular assumption about the assignment of data onto peers.  
In structured P2P networks, data items (or indexes of data items) are assigned onto peers according to some rules.  One popular type of struc-tured P2P networks is the Distributed Hash Table (DHT) based networks like CAN (Ratnasamy et al., 2001), Pastry (Rowstron and Druschel, 2001), Chord (Stoica et al., 2001) and Tapestry (Zhao et al., 2001). They mainly aim at finding efficient ways to locate resources. 
The Resource Space Model uses normalized classification semantics to uniformly specify and manage various resources. Integrating The Resource Space Model with P2P networks offers a chance for P2P networks to manage complex resources by content.  
It is also a chance for the Resource Space Model to support decentral-ized applications by cooperating with P2P networks.  Previous works on the Resource Space Model mainly focused on the Resource Space Model and the cen-tralized storage mechanism. If we want to use the Resource Space Model to manage a Web community or an office network, the following issues are critical:  
1.	How to implement the Resource Space Model in a decentralized environment?  
2.	How to find a decentralized data structure to represent the Resource Space Model and appropriate algorithms to efficiently implement the Resource Space Model's operations?  
This chapter presents an approach to construct a resource space overlay to form a structured P2P Resource Space Model. The basic idea is similar to the space partition idea of CAN (Ratnasamy et al. 2001). 
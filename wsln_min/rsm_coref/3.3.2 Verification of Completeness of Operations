Before we verify the completeness of operations, two definitions about operations should be given first. Given two operations op1 and op2 on re-source spaces, suppose op1 is unary and op2 is binary, we use op1 (RS1) to represent the result of RS1 under op1, RS1op2RS2 to represent the result of RS1 and RS1 under operation op2. 
Definition 3.3 Two unary operations op1 and op2 on resource spaces are called equivalent to each other if for any resource space RS, op1 (RS)= op2 (any resource space RS). Two unary operations op1 and op2 on resource spaces are called equivalent to each other if for any resource spaces RS1 and RS2, RS1 op1 RS2= RS1 op2 RS2. 
For example, if we define a binary operation ‘*’ as: *: RS1* RS2= RS1(RS1RS2), then a binary operation ‘*’ is equivalent to the operation ‘’, denoted as *=. If two operations are equivalent to each other, two operations are the same from the perspective of mapping, so two operations are the same operation. We de-fine the equivalence of operations is to show that the operations elabo-rately designed by users may be the same with existing operations in es-sence. 
As we can see, the operation ‘*’ is composed of operation ‘’, then we can say that the operation ‘*’ can be represented by operation ‘’. Then we have the following definition. 
Definition 3.4 Suppose OP is an operation set on resource spaces, an unary (or binary) operation OP is called can be represented by OP, if op (RS) (or RS1 op RS2) can be represented as an expression of OP. 
For example, we have RS1RS2= RS1- (RS1- RS2), so operation ‘’ can be represented by operation ‘-’. Equivalence and representation are the two basic relations between operations discussed in this paper. 
Because we cannot give all possible operations, the completeness of operations can only be proven in theory and cannot be proven by giving examples. But the incompleteness of operations can be proven by giving examples. So we give an example to show that operations set {Union, Difference, Intersection} is not complete. For example, suppose the re-source spaces considered are {RS1(X1, X2), RS2(X1, Y2)}, then it is clear that space RS3(X1, X2, Y2) is in the required results. But from the re-source spaces consideredX2, operations set {Union, Difference, Intersection} cannot get space RS3(X1, X2, Y2). It is because the precondition of operations set {Union, Difference, Intersection} is that the operated spaces have the same dimen-sions, and the result spaces also have the same dimension. So from two 2-dimensional spaces we cannot get a 3-dimensional space. Then, it is clear that operations set {Union, Difference, Intersection} is not com-plete. 
Then we will prove that the nine operations defined above are com-plete for query on resource spaces. 
Theorem 3.1. The nine operations Union, Difference, Intersection, Ex-tended Cartesian Product, Selection, Join, Disjoin, Merge and Split are complete for query in resource spaces. 
Proof. According to definition 3.1, an operation set OP on resource spac-es is complete if: for any given finite collection of resource spaces RS1, RS2, …, RSN in simple normal form, and an operation set OP on resource spac-es can get all the resource spaces in the form of: {RS(x1,  ,xd)| xk RSi (Xj), 1i N, d1 and 1k d }. So, we only need to show that the nine operations can get the result spaces as above. 
We use mathematical induction to prove this. When N=1, for a single resource space RS1(x1,  ,xd), we can use the unary operation Selection to get the spaces in the form of {RS(x1,  , xn)| (x1,  , xn) RS1}, then use the unary operation Disjoin to select any axes we need, then we can get the spaces in the following form {RS(x1,  , xd)| xk RS1 (Xj) , 1j n and 1k d }, which means that when N=1 the conclusion holds. Sup-pose when N=m the conclusion holds, i.e., the nine operations can get all the result spaces in the form of {RS(x1,  , xd)| xk RS1 (Xj) Xj, 1j n and 1k d }, next we will show that when N=m+1 the conclusion also holds. Now we divide these m+1 resource spaces into two parts: RS1, RS2, …, RSm and RSm+1, for the preceding m spaces, from the assumption we can get that the nine operations can get the result spaces in the following form: {RS(x1,  , xd)| xk RSi (Xj), 1i m, d1 and 1k d }; for the re-source space RSm+1, as the above using operations Selection and Disjoin we can get: {RS(x1,  , xd)| xk RSm+1 (Xj) , 1j n and 1k d }. For these two spaces, using the set operations Union, Difference, Intersection and operation Extended Cartesian Product we can get the correlations be-tween these two spaces: {RS(x1,  , xd)| xk RS1 (Xj)Xj, 1i m+1, d1 and 1k d }. So when N=m+1 the conclusion also holds. Then we can get for any giv-en finite collection of resource spaces RS1, RS2, …, RSN in simple normal form, the nine operations can get all the resource spaces in the form of: {RS(x1,  ,xd)| xk RSi(Xj), 1j n, d1 and 1k d}. So, the nine opera-tions Union, Difference, Intersection, Extended Cartesian Product, Selec-tion, Join, Disjoin, Merge and Split are complete for query in resource spaces.  
From the above proof process we can see that, in fact the operation set {Union, Difference, Extended Cartesian Product, Selection, Disjoin} is already complete and the other four operations can all be represented by the operation set {Union, Difference, Extended Cartesian Product, Selection, Disjoin}. Then are the operation set {Union, Difference, Extended Cartesian Product, Selection, Disjoin} necessary? The answer is yes. We only need to show that any of the operation set {Union, Difference, Extended Cartesian Product, Selection, Disjoin} cannot be represented by the other four operations. For this negative conclusion, we only need to give a counter-example. Then we will give an example to show that Extended Cartesian Product cannot be represented by operations {Union, Difference, Selection, Disjoin}. Suppose RS is a 2-dimensional resource space, then RSRS is a 4-dimensional resource space. But operations {Union, Difference, Selection, Disjoin} can only maintain or decrease the dimensionality of resource spaces, so from RS, operations {Union, Difference, Selection, Disjoin} cannot get a resource space whose dimen-sionality is larger than 2. So RSRS cannot be got from RS under operations {Union, Difference, Selection, Disjoin}, which means that Extended Cartesian Product cannot be represented by operations {Union, Difference, Selection, Disjoin}. Then we can get the following corollary. 
Corollary 3.1. The five operations Union, Difference, Extended Cartesian Product, Selection and Disjoin are complete and necessary for query in resource spaces. 
In theory, the definition of a complete and necessary operation set is enough, the definition of a complete and necessary operation set is indeed from the perspective of expressiveness of query lan-guages. But in applications, some new operations which can be repre-sented by existing operations will also be defined, for the convenience of expression or operation. For example, from the Join operation, we can naturally introduce another useful operation: Division. And we can de-fine another operation Projection from the operation Disjoin. Then how many new operations we can define in addition to the existing opera-tions? The answer is infinite. The following example will show define. 
Example 3.1 There exist infinite different operations. According to defi-nition 3, we only need to show that there exist infinite operations which are not equivalent to each other. We define a sequence of operations {Q1, Q2, Q3, …} as follows: 
    Q1: rs1 Q1 rs2 = (rs1 È rs2) ´ (rs1 Ç rs2), 
    Q2: rs1 Q2 rs2 = (rs1 Q1 rs2) Q1 (rs1 Q1 rs2), 
    …… 
    Qi+1: rs1 Qi+1 rs2 = (rs1 Qi rs2) Q1 (rs1 Qi rs2), 
    …… 
From the definition, we have: 
rs1 Q2 rs2 = (rs1 Q1 rs2) Q1 (rs1 Q1 rs2) 
= ((rs1 È rs2) ´ (rs1 Ç rs2)) Q1 ((rs1 È rs2) ´ (rs1 Ç rs2)) 
= (((rs1 È rs2) ´ (rs1 Ç rs2)) È ((rs1 È rs2) ´ (rs1 Ç rs2))) ´  
(((rs1 È rs2) ´ (rs1 Ç rs2)) Ç ((rs1 È rs2) ´ (rs1 Ç rs2))) 
= ((rs1 È rs2) ´ (rs1 Ç rs2)) ´ ((rs1 È rs2) ´ (rs1 Ç rs2)) 
= (rs1 Q1 rs2) ´ (rs1 Q1 rs2).  
So we can see that Q2= Q1 ´ Q1. And, we conjecture that Qi= Qi-1 ´ Qi-1 for any i 2. 
rs1 Qi rs2 = (rs1 Qi-1 rs2) Q1 (rs1 Qi-1 rs2) 
= ((rs1 Qi-1 rs2) È (rs1 Qi-1 rs2)) ´ ((rs1 Qi-1 rs2) Ç (rs1 Qi-1 rs2)) 
= (rs1 Qi-1 rs2) ´ (rs1 Qi-1 rs2). 
So we have Qi= Qi-1 ´ Qi-1 for any i 2.  Then, it is clear that operations {Q1, Q2, Q3, …} are not equivalent to each other, so operations {Q1, Q2, Q3, …} are infinite and different operations. 
This example tells that finding a “self-contained” operation set regard-less of a “self-contained” operation set's applications is impractical. 
After the study of the completeness of operations, we will discuss the expressiveness of query languages, and the emphasis is on the compari-son between expressiveness of different query languages and the charac-teristics of expressiveness. 
The semantic basis of the Resource Space Model is name space, basic data type, set and partition.  
Concepts are labeled in the name space as consensus of a community, while Concepts's semantics are determined by classification and use-case in four worlds  the real world, the document world, the machine world and the mental world (Zhuge et al, 2006).  Some basic concepts in the name space do not need to be explained. Some basic concepts in the name space can be used to define other concepts. A set of concepts can represent a certain semantics. Classifications on concepts form concept hierarchies.  
The basic semantic elements of the Resource Space Model are resource, resource space, axis and coordinate. 
A resource in the machine world has name, type and content. Concepts are basic elements of the composing content. For example, a Web page has a URL, and a Web page's content can be represented by a set of concepts. 
A Resource Space is a multi-dimensional classification space. A Resource Space consists of a name and a set of axes, denoted as RS(X1, X2, …, Xn).  Each axis Xi represents a classification method.  Xi is partitioned by a set of coordinates denoted as Xi  <Ci1, Ci2, …, Cim>.  
A point in the space, determined by one coordinate at every axis, represents a set of resources of the same category.  
An axis can be regarded as a 1-dimensional resource space. 
A coordinate C represents a set of resources, denoted as R(C). Resources represented by axis Xi are the union of all the resources represented by axis Xi's coordinate: R(Xi) R(Ci1)R(Ci2) …R(Cin). The semantics of a coordinate is represented by name, basic datatype, a set of concepts, or a coordinate tree (low-level coordinates finely classify low-level coordinates's common ancestor).  The semantics of a coordinate is regulated by the semantics of a coordinate's axis.  
A coordinate C is called independent from another coordinate C’ if there is no intersection between R(C) and R(C’).   Using existing taxonomy and commonsense as the classification method is a way to establish concensus between designers and users. 
The resource space, axis, coordinate, and point are sets in nature.  
A coordinate regulates a set of points. An axis regulates a set of coordinates.  An axis name represents higher classification level than An axis's coordinates. A resource space regulates a set of axes and the refined classification relationship.  A resource is determined by locating the point A resource belongs to and by selecting from the resource set according to the resource set's name and content description. 
Two axes can be regarded as equivalent if their names are the same in semantics and the names of all the corresponding coordinates are the same in semantics.  
   The following are two operations on axis: 
1.	If two axes X1  <C11, C12, …, C1n> and X2  <C21, C22, …, C2m> have the same axis name but have different coordinates, then two axes X1  <C11, C12, …, C1n> and X2  <C21, C22, …, C2m> can be merged into one: X X1 È X2 <C11, C12, …, C1n , C21, C22, …, C2m >.  In this case, the name of X represents X1  X2  <C21, C22, …, C2m>. 
2.	An axis X can be split into two axes X’ and X by dividing the coordinate set of An axis X into two: the coordinate set of X X’ and the coordinate set of X, such that An axis X X’È X.   If two axes X’ and X need to be merged for the future use, the names of two axes X’ and X should be the same in semantics. 
The semantics of axis and coordinate can be formally defined or informally defined.  For example, the semantics of a coordnate can be defined by a set of concepts, which regulate the semantics of the resources a coordnate may contain. The above definitions enable a resource space to represent any form of resources. 
If we use a set of domain concepts KC to describe a coordinate C, and the resources contained by a set of domain concepts KC share common concept set KR, then we could find a mapping between a set of domain concepts KC and common concept set KR such that corresponding con-cepts are the same or share a common ancestor.  a mapping between KC and KR such that corresponding con-cepts are the same or share a common ancestor is useful in automatically classifying resources. 
Let X(C1, C2, …, Cn) be an axis and Ci' be a coordinate at another axis X’,  we say that X finely classifies Ci' (denoted as Ci'/X ) if and only if:  
1.	 (R(Ck)R(Ci')) (R(Cp)R(Ci')) = NULL (kp, and k, p[1, n]); and,  
2.	R(C1)ÇR(Ci')ÈR(C2)ÇR(Ci') È … ÈR(Cn)ÇR(Ci') R(Ci') hold. 
As the result of fine classification, R(C’) is partitioned into n catego-ries: R(Ci'/X) {R(C1)ÇR(Ci'), R(C2)ÇR(Ci'), …, R(Cn)ÇR(Ci')}. 
For two axes X (C1, C2, …, Cn) and X’  (C1', C2', …, Cm'), we say that X (C1, C2, …, Cn finely classifies X’  (C1', C2', …, Cm') (denoted as X’/X) if and only if X (C1, C2, …, Cn finely classi-fies C1' , C2' ,…, and Cm' respectively. 
Two axes X and X’ are called orthogonal with each other (denoted as X ^ X’) if X finely classifies X’ and vice versa, i.e., both X’/X and X/X’ hold. 
Establishing orthogonal relationship between relevant classifications deepens people’s understanding on the real world. 
The following three normal forms are for designing a good resource space. 
1.	A first-normal-form resource space is a resource space and there does not exist name duplication (semantic overlap) between coordinates at any axis. 
2.	A second-normal-form resource space is a first-normal-form, and for any axis, any two coordinates are independent from each other.  
3.	A third-normal-form resource space is a second-normal-form and any two axes of A third-normal-form resource space are orthogonal with each other. 
The following are four operations of the resource space: 
1.	Join operation. If two resource spaces RS1 and RS2 specify the same type of resources and two resource spaces RS1 and RS2 have n  (n³1) common axes, then two resource spaces RS1 and RS2 can be joined into one resource space RS such that RS, RS1 and RS2 share n  (n³1) common axes and |RS|=|RS1| + |RS2|  n, where |RS| represents the number of dimensions of the RS.  one resource space RS is called the join of two resource spaces RS1 and RS2RS2, denoted as RS1×RS2ÞRS.   
2.	Disjoin operation. A resource space RS can be disjoined into two re-source spaces RS1 and RS2 (denoted as RSÞRS1×RS2) that specify the same type of resources as that of A resource space RS such that two re-source spaces RS1 and RS2 (denoted as RSÞRS1×RS2) that specify the same type of resources as that of RS have n  (1£n£min(|RS1|, |RS2|)) common axes and |RS|  n different axes, and |RS|=|RS1| + |RS2|  n. 
3.	Merge operation. If two resource spaces RS1 and RS2 specify the same type of resources and satisfy: (1) |RS1|=|RS2|=n; and, (2) two resource spaces RS1 and RS2 have n1 common axes, and there exist two different axes X1 and X2 satisfying the merge condition, then two resource spaces RS1 and RS2 can be merged into one RS by retaining n1 common axes in one RS and including a new axis X=X1ÈX2.  one RS is called the merge of two resource spaces RS1 and RS2RS2, denoted as RS1ÈRS2ÞRS, and |RS|= n.  the merge condition can be extended as follows: two resource spaces RS1 and RS2 have nk common axes (1k<n), and there exists one-one mapping between the rest k axes of two resource spaces RS1 and RS2 such that the merge condition can be satisfied, then two resource spaces RS1 and RS2 can be merged into one RS by retaining n1 common axes in one RS and including k new axes, each of which is the un-ion of the corresponding axes. 
4.	Split operation. A resource space RS can be split into two resource spaces RS1 and RS2 that store the same type of resources as that of A resource space RS and have |RS| 1 common axes by splitting an axis X into two: X’ and X, such that X=X’ÈX. Split operation is denoted as RSÞRS1ÈRS2.  (In contrast to the merge operation, Split operation can be extended to the case that two resource spaces RS1 and RS2 that store the same type of resources as that of RS and have |RS| 1 common axes RS2 have |RS|  k common axes by splitting every of the k axes into two.) 
Several strategies can be adopted to realize the join operation. One strategy is that only those resources specified in both original resource spaces are reserved in the new resource space.  the join operation would result in many empty nodes. Therefore, the join and merge operations are usually used for generating views of existing resource spaces. If both original resource spaces are 3NF, then RS is a 3NF according to the normal form theory of the Resource Space Model.  
The Resource Space Model is equipped with an SQL-like resource operation language to support operations on resource space.  The basic operations are introduced in The Knowledge Grid (Zhuge, 2004d).   
Efficient resource management depends on the human behavior mode of dealing with resources and the mode of storing resources in the resource space.  The degree of matching between the human behavior mode of dealing with resources and the mode of storing resources in the resource space determines the efficiency. 
Fig.1.4 depicts the interaction between the human behavior and the resource space.   
Storing resources in the right category with high probability leads to better retrieval result. The query language bridges the mutual understanding between the behavior modes and the resource storage. The semantic mechanism like domain ontology helps explain the output resources and the input on storage and query. 
The operations Join, Disjoin, Merge and Split, have been defined in (Zhuge, 2004a) as follows: 
Operation 3.1 Join  Let |RS| be the number of the dimensions of RS. If two resource spaces RS1 and RS2 store the same type of resources and have n (n 1) common axes, then two resource spaces RS1 and RS2 can be joined together as RS such that RS1 RS2 share n (n 1) common axes and |RS|=|RS1| + |RS2| n. RS is called the join of RS1 RS2, denoted as RS1 RS2 RS. 
According to the above definition, all the resources in the result re-source space RS come from RS1 and RS2 and all the resources in the result re-source space RS can be classified by more axes. Join operation provides an approach to refining classification of resources. 
Operation 3.2 Disjoin  A resource space RS can be disjoined into two resource spaces RS1 and RS2 that store the same type of resources as that of A resource space RS such that two resource spaces RS1 and RS2 that store the same type of resources as that of RS have n (1≤n≤min(|RS1|, |RS2|)) common axes and |RS|  n different axes, and |RS| = |RS1| + |RS2|  n (denoted as RSRS1RS2). Operation 3.2 Disjoin  A resource space RS can clarify the classification of re-sources by separating a resource space with large number of axes into two smaller ones. Both Join and Disjoin operations keep 1NF, 2NF and 3NF of the Resource Space Model. 
Operation 3.3 Merge  If two resource spaces RS1 and RS2 store the same type of resources and satisfy: (1) | RS1|=| RS2|=n; and (2) two resource spaces RS1 and RS2 have n1 common axes, and there exist two different axes X' and X” satisfying the merge condition, then two resource spaces RS1 and RS2 can be merged into one RS by retaining n1 common axes and adding a new axis X*=X'X”. one RS is called the merge of RS1 RS2, denoted as RS1RS2RS, and |RS|= n. 
Operation 3.4 Split  A resource space RS can be split into two resource spaces RS1 and RS2 that store the same type of resources as A resource space RS and have |RS| 1 common axes by splitting an axis X into two: X’ and X, such that X=X’X.  Operation 3.4 Split is denoted as RSRS1RS2. 
By the split operation, the unconcerned coordinates on a certain axis can be filtered out and only the interested coordinates are preserved. 
It is obvious that we can also define the set operations of the Resource Space Model, including operations like Union, Difference and Intersec-tion. operations like Union, Difference and Intersec-tion are not the same with the traditional set opera-tions. operations like Union, Difference and Intersec-tion should also satisfy more conditions. Suppose two resource spaces RS1 and RS2 have the same number of dimensions, and the corre-sponding axes are in the same domain ontology.  Then, we can define the operations Union, Difference and Intersection as follows: 
Operation 3.5 Union  The union of two resource spaces RS1(X11,  , X1n) and RS2(X21,  , X2n) is: RS1∪RS2={ (x1,  , xn)| (x1,  , xn) RS1 or (x1,  , xn) RS2}. The result is also a resource space with n axes, which consists of the points in two resource spaces RS1(X11,  , X1n) and RS2(X21,  , X2n)RS2. 
Operation 3.6 Difference  The difference of two resource spaces RS1(X11,  , X1n) and RS2(X21,  , X2n) is: RS1-RS2={ two resource spaces RS1(X11,  , X1n) and RS2(X21,  , X2n)two resource spaces RS1(X11,  , X1n) and RS2(X21,  , X2n)X1n }. The result is also a resource space with n axes, which consists of the points in X1n but not in RS2. 
Operation 3.7 Intersection  The intersection of two resource spaces RS1(X11,  , X1n) and RS2(X21,  , X2n) is: RS1RS2={ two resource spaces RS1(X11,  , X1n) and RS2(X21,  , X2n)two resource spaces RS1(X11,  , X1n) and RS2(X21,  , X2n)X1n }. The result is also a resource space with n axes, which consists of the points both in two resource spaces RS1(X11,  , X1n) and RS2(X21,  , X2n)RS2. 
In addition to these operations, we can also define two operations Ex-tended Cartesian Product and Selection as follows: 
Operation 3.8 Extended Cartesian Product   The extended Cartesian Product of two resource spaces RS1(X11, , X1n) and RS2(X21, , X2m) is a resource space with n + m axes. The first n axes are the axes of RS1(X11,  and the following m axes are axes of RS2(X21, , X2m. If RS1(X11,  has k1 points and RS2(X21, , X2m has k2 points, then the Extended Cartesian Product of two resource spaces RS1(X11, , X1n) and RS2(X21, , X2m) has k1k2 points, we denote The extended Cartesian Product of two resource spaces RS1(X11, , X1n) and RS2(X21, , X2m) as RS1RS2={(x11, , X1n, x21,  , x2m) | two resource spaces RS1(X11, , X1n) and RS2(X21, , X2m) }. 
Operation 3.9 Selection  Operation 3.9 Selection is also called Restriction. Operation 3.9 Selection is for selecting the points satisfying the given conditions in the resource space RS, denoted as F(RS)={t | tRS and F(t)=’true’}, where F repre-sents the given conditions in the resource space RS, F is a logic expression, F has binary value ‘true’ or ‘false’. F is composed of the logic operators , ,  connecting every arithmetic expression. In fact Operation 3.9 Selection is to select the points that make F be true from the resource space RS. 
It is clear that different users will also design new operations on differ-ent purposes and we cannot list all of new operations on differ-ent purposes. Then, we will discuss the verification of the completeness of operations and prove that the nine op-erations defined above are a complete operation set for query on resource spaces. 
Section 1.7 has made a comparion between the Resource Space Model and the Relational Data Model.  Several differences influence the design of a query language. Relational data tend to have a regular structure, which allows the descriptive meta-data to be stored in a separate catalog. Resources in resource space, in contrast, are usually heterogeneous. Re-source spaces often contain many levels of nested elements, whereas rela-tional data are “flat.” Relational data are usually “dense” (every column has a value). Resource spaces, in contrast, are often “sparse”. So, the rela-tional query languages are not suitable for querying resource spaces. 
The Resource Space Model needs a resource-using mechanism to pro-vide not only an operational browser for end users but also a program-ming environment for high-level developers (Zhuge, 2004d). It provides a set of specific programming language — Resource Operation Language ROL, and also provides a running platform for a set of specific programming language — Resource Operation Language ROL to be used for querying and operating resource spaces. a set of specific programming language — Resource Operation Language ROL could be embedded in other high-level programming languages supporting the call from oth-er languages. In contrast, the SQL provides a programming language for relational database application systems to operate relational tables.  
The ROL could be a programming environment.  The ROL adopts the SQL’s SELECT-FROM-WHERE grammar. The ROL can execute the operations similar to the classic relational databases such as nesting query, aggrega-tion and ordering the results.  The ROL also borrows from the XML que-ry language such characteristics as the management of the structured and semi-structured data, the support of abstract data types, the support of document selection and local path expression. The comparisons of The ROL with the XQL (XML Query Language) and the SQL’s are given in the following table. 
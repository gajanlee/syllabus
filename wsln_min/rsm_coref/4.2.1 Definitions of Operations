All operations in this algebra fall into two categories: the traditional set operations (union, intersection, difference and Cartesian product) and the RSM-specific operations (join, disjoin, merge, split, division, selection, and projection). 
The set operations of the Resource Space Model can be defined as fol-lows: 
Union. For two union-compatible resource spaces RS1 and RS2, the union of two union-compatible resource spaces RS1 and RS2RS2, denoted as RS1  RS2, has the same resource space sche-ma as two union-compatible resource spaces RS1 and RS2, and RS1  RS2 = {p | (p1RS1  p2RS2)  p=pp1  p=pp2}. This means that p is non-null in RS1  RS2 if and only if either p1 is non-null in RS1 or p2 is non-null in RS2. For any point p in RS1  RS2 and its counterparts p1 in RS1 and p2 in RS2, we have R(p) = R(p1)  R(p2). Fig. 4.1 is an example of union operation. 
Intersection. For two union-compatible resource spaces RS1 and RS2, the intersection of two union-compatible resource spaces RS1 and RS2RS2, denoted as RS1RS2, has the same resource space schema as two union-compatible resource spaces RS1 and RS2. And RS1RS2={p | p1RS1  p2RS2  p =p p1  p =p p2}. This means that p is non-null in RS if and only if both p1 is non-null in RS1 and p2 is non-null in RS2. For any point p in the intersection of RS1 and RS2, denoted as RS1RS2, and its counterparts p1 in RS1 and p2 in RS2, we have R(p) = R(p1)R(p2). Fig. 4.2 is an example of the intersection operation. 
Difference. For two union-compatible resource spaces RS1 and RS2, the difference of two union-compatible resource spaces RS1 and RS2RS2, denoted as RS1RS2, has the same resource space schema as two union-compatible resource spaces RS1 and RS2RS2. For any point p in the difference of RS1 and RS2, denoted as RS1RS2,, let p1 and p2 be two points having the same coordinates as p1 in RS1 and in RS2 respective-ly. Then R(p)=R(p1) R(p2). p1 is non-null if and only if either (1) p1 is non-null and p2 is null, or (2) R(p) is non-null. Otherwise, p1 is null. 
Cartesian product. Let RS1(X1, X2 … Xn) and RS2 (Y1, Y2 …Ym) be two re-source spaces that store the same type of resources. The Cartesian prod-uct of two re-source spaces that store the same type of resources is defined as RS1  RS2 = RS(X1, X2 … Xn, Y1, Y2 …Ym). For any point p(x1, x2 … xn, Y1, y2 … ym) in RS, there exist p1(x1, x2 … Xn) and p2(y1, y2 … ym) in two re-source spaces that store the same type of resources RS2 respectively. Then p is non-null if and only if both p1 and p2(y1, y2 … ym are non-null. If n=m, Xi=Yi (1in) and xj=yj (1jn), then R(p)=R(p1)R(p2). Otherwise, R(p)=R(p1)R(p2).  
The RSM-specific operations Join, Disjoin, Merge and Split have been defined in (Zhuge, 2004a). The following definitions are given from the view of resources.  
Join. Let |RS| be the number of the dimensions of the RS. If two resource spaces RS1(X1, …, Xm, Y1, …, Yn) and RS2(Y1, …, Yn, Z1, …,Zk) store the same type of resources and have n common axes, then two resource spaces RS1(X1, …, Xm, Y1, …, Yn) and RS2(Y1, …, Yn, Z1, …,Zk) can be joined together as one resource space RS(X1, …, Xm, Y1, …, Yn, Z1, …,Zk) such that RS1(X1 RS2(Y1, …, Yn, Z1, …,Zk) share n common axes and |RS|=|RS1| + |RS2|  n. For any point p(x1, …, Xm, y1, …, Yn, z1, …,Zk) in RS, p is non-null if and only if both point p1(x1, …, Xm, y1, …, Yn) in RS1(X1 and point p2(y1, …, yn, z1, …,Zk) in RS2(Y1, …, Yn, Z1, …,Zk) are non-null. If RS1(X1 RS2(Y1, …, Yn, Z1, …,Zk) are union-compatible, then R(p)=R(p1)R(p2). Otherwise, R(p) = R(p1)R(p2). RS is called the join of RS1(X1 RS2(Y1, …, Yn, Z1, …,Zk), denoted as RS1RS2RS. 
According to the above definition, all the resources in the new resource space RS come from RS1 and RS2 and can be classified by X1, …, Xm, Y1, …, Yn, Z1, …, Zk. The Join operation provides an efficient method to refine classification of resources.  
Disjoin. A resource space RS(X1, …, Xm, Y1, …, Yn, Z1, …, Zk) can be dis-joined into two resource spaces RS1(X1, …, Xm, Y1, …, Yn) and RS2(Y1, …, Yn, Z1, …, Zk) that store the same type of resources as that of A resource space RS(X1, …, Xm, Y1, …, Yn, Z1, …, Zk) such that two resource spaces RS1(X1, …, Xm, Y1, …, Yn) have n (1≤n≤min(|RS1|, |RS2|)) common axes and |RS|  n differ-ent axes, and |RS|=|RS1| + |RS2|  n. For any point p1 in A resource space RS(X1, …, Xm, Y1, …, Yn, Z1, …, Zk), there exists a set P of points in A resource space RS(X1, …, Xm, Y1, …, Yn, Z1, …, Zk), each element of which has the same projections on X1, …, Xm, Y1, …, Yn as any point p1 in RS1. Then any point p1 in RS1 is non-null if and only if there exists at least one non-null point in P.  R(p1)=R(p) for any pP. two resource spaces RS1(X1, …, Xm, Y1, …, Yn) |RS2| are called disjoin of A resource space RS(X1, …, Xm, Y1, …, Yn, Z1, …, Zk), denoted as RSRS1RS2. 
Different from the Join operation, the disjoin operation can clarify the classification of resources by separating large number of axes into two overlapped parts.  
Based on the disjoin operation, we can naturally introduce another use-ful operation: projection. The projection of the RSM has almost the same definition as the disjoin operation except that The projection of the RSM results in only one resource space which includes all the desirable axes. For resource space RS(X1, …, Xm, Xm+1, …, Xn), X1, …, Xm(RS) will be used to denote the projection of resource space RS(X1, …, Xm, Xm+1, …, Xn) on axes X1, …, and Xm. From the definition of the disjoin operation, it is clear that The projection of the RSM provides an algebraic counterpart to the existential quantifier. 
Merge. If two resource spaces RS1(X1, …, Xn-1, X') and RS2(X1, …, Xn-1, X”) store the same type of resources and satisfy: 1) |RS1|=|RS2|=n; and, 2) two resource spaces RS1(X1, …, Xn-1, X') and RS2(X1, …, Xn-1, X”) have n1 common axes, and there exist two different axes X' and X” satisfying the merge condition, then two resource spaces RS1(X1, …, Xn-1, X') and RS2(X1, …, Xn-1, X”) can be merged into one RS by retaining n1 common axes and adding a new axis X*=X'X”. one RS is called the merge of two resource spaces RS1(X1, …, Xn-1, X') and RS2(X1, …, Xn-1, X”)one RS, denoted as RS1RS2RS, and |RS|= n. For any point p in one RS, there exists a set P of points in RS1 one RS, each element of which has the same projections on all axes as p. Then any point p in RS is non-null if and only if there exists at least one non-null point in P. The formal definition is RS1RS2 = {p(X1, …, Xn-1, X*) | pRS1 pRS2 X*=RS1.X' RS2.X”}. 
It is obvious that the Union operation is the special case of the merge operation where all axes are common. The above definition can be easily extended to a more general situation where resource spaces RS1 and RS2 have n-m common axes and m different axes satisfying the merge condi-tion. 
Split. A resource space RS can be split into two resource spaces RS1 and RS2 that store the same type of resources as A resource space RS and have |RS|1 common axes by splitting an axis X into two: X’ and X, such that X=X’X. Split is denoted as RSRS1RS2. For any point p1 in RS1, there exists a point p in A resource space RS, which has the same projections on all axes as any point p1 in RS1. Then any point p1 in RS1 is non-null if and only if any point p1 in RS1 is non-null. The formal definition is RS1(X1, …, Xn-1, X[C]) = {p(X1, …, Xn-1, X*) | pRS X*=X[C]}, where X[C] represents the axis X containing only the coordinates in coordinate set C. 
By using the split operation, the unconcerned coordinates on a certain axis can be filtered out and only the interesting coordinates are preserved. 
Selection. For a resource space RS, the Selection operation is used to se-lect the desirable points according to the given restriction. the Selection operation is denoted as F(RS)={p | pRS  F(p)}, where F is a logical expression. Any point in a resource space RS making F true will be marked with non-null and other points will be marked with null. F has the following four forms:  
1.	pm[Xi]  Y, where Y may be pn[Xj] or just a noun and noun phrase in domain ontology and  represents =, , <, ,  or >. It is a type of restrictions on the projections on axes of points. 
2.	pm[Xi]  Y, where Y is just a set of nouns or noun phrases in domain ontology and  represents  or . 
3.	R(pm[Xi])  R(pn[Xj]), where  represents =, , , , ,  and . It is a type of restrictions on the set of resources that points contain. 
4.	fc(pi)  Y, where fc is the function to calculate the cardinality of the given point and  represents =, , <, ,  and >. It is a type of restrictions on the quantity of resources that points contain. 
Division. Let RS1(X1, …, Xm, Y1, …, Yt) and RS2(Y1, …, Yt, Z1, …, Zn) be two resource spaces. Dividing RS1(X1, …, Xm, Y1, …, Yt by RS2(Y1, …, Yt, Z1, …, Zn) (denoted as RS1[Y1, …, Yt]RS2) is a resource space X1, …, Xm(RS), and for any point p in RS1(X1, …, Xm, Y1, …, Yt), any point p in X1, …, Xm(RS) is non-null if and only if for any non-null point p in RS2(Y1, …, Yt, Z1, …, Zn) there exists a non-null point p’ in RS1(X1, …, Xm, Y1, …, Yt such that p[X1, …, Xm]=p’[X1, …, Xm] and p [Y1, …, Yt]=p’[Y1, …, Yt]. 
The division operation provides an algebraic counterpart of the Univer-sal Quantifier.  The division operation's role is similar to the division operation in relational al-gebra. 